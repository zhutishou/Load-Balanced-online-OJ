一.介绍
  该项目旨在实现类似leedcode在线题目列表、在线编程与结果判定功能，相比与leedcode，我们这里是简化实现

二.技术栈
  C++ STL、Boost标准库、cpp-httplib、多进程、多线程、json序列化与反序列化、MySQL、http+css+js、负载均衡

三.系统环境
  Linux-Ubuntu Vscode2022 MySQL Workbench

四.项目实现过程
  该项目我们分为三个模块，分别在三个文件夹中，如下：
  comm:实现公共模块内容
  compile_server:编译与运行模块
  oj_server:获取题目列表、查看题目编写界面、负载均衡以及其他需要的功能
具体流程如下：
(1):compile_server目录
1.编写编译模块
在compile_server目录中我们实现一个编译功能的文件:compiler.hpp,该文件我们只负责编译功能，能够在temp目录下生成.cpp、.exe、.compiler_error三个文件，在compile_server.cc文件调用下完成编译功能

2.编写日志模块
对于一个项目日志模块必不可少，在comm目录下，我们生成一个Log.hpp文件完成日志功能，补充：该目录下util.hpp文件是负责编写一些工具类

3.编写运行模块
在compile_server目录下编写running.hpp文件，生成.stdin、.stdout、.stderr三个文件(temp中)，利用子进程来运行文件，并返回一个信号判断结果正确与否，关键点：在线OJ项目是需要保证时间和空间限制的，所以我们通过RLIMIT来限制时间与空间

4.编写编译运行模块
在compile_server目录下添加一个compile_run.hpp文件，该文件负责将文件编译运行整合，当compile_server.cc文件调用该文件时就可以形成编译运行一整套体系，同时在util.hpp文件中增加一些新的文件操作和当临时文件使用结束后，在compile_run.hpp中将其形成的一系列文件删除，减少空间消耗

5.将编译运行模块打包成网络形式
编写compile_server.cc文件，该文件将之前实现的编译运行(compile_run.hpp)打包形成网络服务，以便于后续使用，在这里我们通过httplib实现该功能

该功能实现后，对于用户提交的代码在后端编译运行返回结果就全部完成，接下来我们将实现oj服务功能，简单来说就是一个小型网站,该部分基于MVC实现
M: Model,通常是和数据交互的模块，比如，对题库进行增删改查（文件版，MySQL）
V: view, 通常是拿到数据之后，要进行构建网页，渲染网页内容，展示给用户的(浏览器)
C: control, 控制器，就是我们的核心业务逻辑

(2):oj_server目录
1.实现路由器请求功能
编写oj_server.cc文件，将用户请求的内容发送到服务器中，实现类似路由器功能，该部分还是利用现成的httplib实现

2.实现MVC中第一个部分---Model,该部分将questions目录下列表和题目等相关信息加载和向用户显示，实现三个函数:LoadQuestionList-加载题目列表、GetAllQuestions-向用户提供所有题目列表、GetOneQuestion-根据题目编号找到具体的某题，在util.hpp文件中利用boost库中split函数实现字符串切分类StringUtil

3.实现MVC中的View---oj_view.hpp，该文件作用是用来进行页面渲染的，面对template_html中文件需要渲染的内容都是在该文件中实现，具体实现过程见代码详解

4.实现MVC中的Control---oj_control.hpp，该文件是我们这个项目的核心业务处理部分，将oj_model.hpp和oj_view.hpp文件功能使用，方便oj_server.cc直接通过oj_control.hpp文件调用，同时也实现负载均衡，通过调用conf文件中主机IP+Port形式调用可使用的主机

5.实现oj_server.cc功能，当用户将浏览器中代码发送给我们时，我们利用该文件功能获取和调用编译运行服务，并返回给用户显示结果

(3):编写前端内容(html+css+js)
1.实现wwwroot中首页index.html
2.实现template_html中all_questions.html
3.实现template_html中one_question.html

注:前端代码不做讲解！










